{"version":3,"sources":["components/Wrapper/index.js","components/Sort/index.js","components/Filter/index.js","components/Employee/index.js","components/Title/index.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","className","children","Sort","Filter","onClick","filterDirector","filterActor","filterActress","Employee","alt","name","src","image","role","salary","Title","state","employees","filter","setState","this","map","id","key","React","Component","App","href","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qyCASeA,MANf,SAAiBC,GACb,OAAO,yBAAKC,UAAU,qBACX,yBAAKA,UAAU,sBAAuBD,EAAME,YCO5CC,MAVf,SAAcH,GACV,OACI,yBAAKC,UAAU,OACX,uBAAGA,UAAU,qBAAb,+BACA,4BAAQA,UAAU,4CAAlB,mBACA,4BAAQA,UAAU,4CAAlB,sBCMGG,MAXf,SAAgBJ,GACZ,OACI,yBAAKC,UAAU,OACX,uBAAGA,UAAU,qBAAb,6BACA,4BAAQA,UAAU,2CAA2CI,QAAS,kBAAML,EAAMM,mBAAlF,YACA,4BAAQL,UAAU,2CAA2CI,QAAS,kBAAML,EAAMO,gBAAlF,SACA,4BAAQN,UAAU,6CAA6CI,QAAS,kBAAML,EAAMQ,kBAApF,a,qBCuBKC,MA5BjB,SAAkBT,GACd,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,iBACb,yBAAKS,IAAKV,EAAMW,KAAMC,IAAKZ,EAAMa,SAEnC,yBAAKZ,UAAU,WACb,4BACE,4BACE,yCADF,IAC0BD,EAAMW,MAEhC,4BACE,yCADF,IAC0BX,EAAMc,MAEhC,4BACE,2CADF,IAC4Bd,EAAMe,UAItC,yBAAKd,UAAU,YCmCZe,E,4MAlDXC,MAAQ,CACJC,a,EAGJZ,eAAiB,WACb,IAAMY,EAAY,EAAKD,MAAMC,UAAUC,QAAO,SAAAD,GAAS,MAAuB,aAAnBA,EAAUJ,QACzE,EAAKM,SAAS,CAAEF,e,EAGhBX,YAAc,WACV,IAAMW,EAAY,EAAKD,MAAMC,UAAUC,QAAO,SAAAD,GAAS,MAAuB,UAAnBA,EAAUJ,QACzE,EAAKM,SAAS,CAAEF,e,EAGhBV,cAAgB,WACZ,IAAMU,EAAY,EAAKD,MAAMC,UAAUC,QAAO,SAAAD,GAAS,MAAuB,YAAnBA,EAAUJ,QACzE,EAAKM,SAAS,CAAEF,e,uDAIhB,OACI,6BACI,yBAAKjB,UAAU,OACX,wBAAIA,UAAU,uBAAwBoB,KAAKrB,MAAME,WAErD,yBAAKD,UAAU,OACX,yBAAKA,UAAU,YACX,kBAAC,EAAD,QAGR,yBAAKA,UAAU,OACX,yBAAKA,UAAU,cACX,kBAAC,EAAD,CAAQK,eAAgBe,KAAKf,eAAgBC,YAAac,KAAKd,YAAaC,cAAea,KAAKb,kBAGvGa,KAAKJ,MAAMC,UAAUI,KAAI,SAAAJ,GAAS,OAC/B,kBAAC,EAAD,CACIK,GAAIL,EAAUK,GACdC,IAAKN,EAAUK,GACfZ,KAAMO,EAAUP,KAChBE,MAAOK,EAAUL,MACjBC,KAAMI,EAAUJ,KAChBC,OAAQG,EAAUH,iB,GA5ClBU,IAAMC,WC2BXC,E,uKATX,OACA,yBAAK1B,UAAU,aACb,kBAAC,EAAD,KACE,kBAAC,EAAD,KAAO,uBAAG2B,KAAK,2DAAR,eAAP,6B,GArBUH,IAAMC,WCKJG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.94850fc9.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Wrapper(props) {\r\n    return <div className=\"wrapper container\">\r\n               <div className=\"col-sm-10 col-md-9\">{ props.children }</div>\r\n           </div>;\r\n}\r\n\r\nexport default Wrapper;","import React from \"react\";\r\n\r\nfunction Sort(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <p className=\"col-sm-8 col-md-6\">Sort the Employees by name:</p>\r\n            <button className=\"button btn btn-primary col-sm-3 col-md-2\">Ascending Order</button>\r\n            <button className=\"button btn btn-success col-sm-3 col-md-2\">Descending Order</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sort;","import React from \"react\";\r\n\r\nfunction Filter(props) {\r\n    return (\r\n        <div className=\"row\">\r\n            <p className=\"col-sm-3 col-md-5\">Filter Employees by role:</p>\r\n            <button className=\"button btn btn-primary col-sm-3 col-md-2\" onClick={() => props.filterDirector()}>Director</button>\r\n            <button className=\"button btn btn-success col-sm-3 col-md-2\" onClick={() => props.filterActor()}>Actor</button>\r\n            <button className=\"button btn btn-secondary col-sm-3 col-md-2\" onClick={() => props.filterActress()}>Actress</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction Employee(props) {\r\n    return (\r\n      <div className=\"row\">\r\n        <div className=\"col\">\r\n          <div className=\"card col\">\r\n            <div className=\"img-container\">\r\n              <img alt={props.name} src={props.image} />\r\n            </div>\r\n            <div className=\"content\">\r\n              <ul>\r\n                <li>\r\n                  <strong>Name:</strong> {props.name}\r\n                </li>\r\n                <li>\r\n                  <strong>Role:</strong> {props.role}\r\n                </li>\r\n                <li>\r\n                  <strong>Salary:</strong> {props.salary}\r\n                </li>\r\n              </ul>\r\n            </div>\r\n            <div className=\"col\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  export default Employee;","import React from \"react\";\r\nimport Sort from \"../Sort\";\r\nimport Filter from \"../Filter\";\r\nimport \"./style.css\";\r\nimport employees from \"../../employees.json\";\r\nimport Employee from \"../Employee\";\r\n\r\nclass Title extends React.Component {\r\n\r\n    state = {\r\n        employees\r\n    };\r\n\r\n    filterDirector = () => {\r\n        const employees = this.state.employees.filter(employees => employees.role === \"Director\");\r\n    this.setState({ employees });\r\n    };\r\n\r\n    filterActor = () => {\r\n        const employees = this.state.employees.filter(employees => employees.role === \"Actor\");\r\n    this.setState({ employees });\r\n    };\r\n\r\n    filterActress = () => {\r\n        const employees = this.state.employees.filter(employees => employees.role === \"Actress\");\r\n    this.setState({ employees });\r\n    };\r\n\r\n    render() {\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <h1 className=\"title col jumbotron\">{ this.props.children }</h1>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"sort col\">\r\n                    <Sort />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"filter col\">\r\n                    <Filter filterDirector={this.filterDirector} filterActor={this.filterActor} filterActress={this.filterActress} />\r\n                </div>\r\n            </div>\r\n            {this.state.employees.map(employees => (\r\n                <Employee\r\n                    id={employees.id}\r\n                    key={employees.id}\r\n                    name={employees.name}\r\n                    image={employees.image}\r\n                    role={employees.role}\r\n                    salary={employees.salary}\r\n                />\r\n            ))}\r\n        </div>\r\n    )\r\n    }\r\n};\r\n\r\nexport default Title;","import React from 'react';\nimport './App.css';\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\n// import Employee from \"./components/Employee\";\n// import employees from \"./employees.json\";\n\nclass App extends React.Component {\n  // state = {\n  //   employees\n  // };\n\n  // showEmployees = () => {\n  //   this.state.employees.map(employees => (\n  //     <Employee\n  //       id={employees.id}\n  //       key={employees.id}\n  //       name={employees.name}\n  //       image={employees.image}\n  //       role={employees.role}\n  //       salary={employees.salary}\n  //     />\n  //   ))}\n\n  render() {\n    return (\n    <div className=\"jumbotron\">\n      <Wrapper>\n        <Title><a href=\"https://www.imdb.com/title/tt1375666/?ref_=nv_sr_srsg_0\">\"Inception\"</a> Employee Directory</Title>\n      </Wrapper>\n    </div>\n  )};\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}